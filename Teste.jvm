import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

class Pessoa {
    String nome;
    LocalDate dataNascimento;

    public Pessoa(String nome, LocalDate dataNascimento) {
        this.nome = nome;
        this.dataNascimento = dataNascimento;
    }
}

class Funcionario extends Pessoa {
    BigDecimal salario;
    String funcao;

    public Funcionario(String nome, LocalDate dataNascimento, BigDecimal salario, String funcao) {
        super(nome, dataNascimento);
        this.salario = salario;
        this.funcao = funcao;
    }
}

public class Principal {
    public static void main(String[] args) {
        List<Funcionario> funcionarios = new ArrayList<>();
        
        funcionarios.add(new Funcionario("João", LocalDate.of(1990, 5, 15), new BigDecimal("2500.00"), "Operador"));
        funcionarios.add(new Funcionario("Maria", LocalDate.of(1985, 10, 29), new BigDecimal("3000.00"), "Gerente"));
        funcionarios.add(new Funcionario("Carlos", LocalDate.of(1992, 12, 10), new BigDecimal("2800.00"), "Analista"));
        
        // 3.2 - Remover João
        funcionarios.removeIf(funcionario -> funcionario.nome.equals("João"));
        
        // 3.3 - Imprimir funcionários formatados
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        for (Funcionario f : funcionarios) {
            System.out.println(f.nome + " - " + f.dataNascimento.format(formatter) + " - "
                    + String.format("%,.2f", f.salario).replace(',', 'X').replace('.', ',').replace('X', '.')
                    + " - " + f.funcao);
        }
        
        // 3.4 - Aumento de 10%
        for (Funcionario f : funcionarios) {
            f.salario = f.salario.multiply(new BigDecimal("1.10"));
        }
        
        // 3.5 - Agrupar funcionários por função
        Map<String, List<Funcionario>> funcionariosPorFuncao = funcionarios.stream()
                .collect(Collectors.groupingBy(f -> f.funcao));
        
        // 3.6 - Imprimir funcionários agrupados
        funcionariosPorFuncao.forEach((funcao, lista) -> {
            System.out.println("Função: " + funcao);
            lista.forEach(f -> System.out.println("  - " + f.nome));
        });
        
        // 3.8 - Funcionários que fazem aniversário em outubro e dezembro
        funcionarios.stream()
            .filter(f -> f.dataNascimento.getMonthValue() == 10 || f.dataNascimento.getMonthValue() == 12)
            .forEach(f -> System.out.println("Aniversariante: " + f.nome));
        
        // 3.9 - Funcionário mais velho
        Funcionario maisVelho = Collections.min(funcionarios, Comparator.comparing(f -> f.dataNascimento));
        System.out.println("Funcionário mais velho: " + maisVelho.nome + ", Idade: " +
                (LocalDate.now().getYear() - maisVelho.dataNascimento.getYear()));
        
        // 3.10 - Ordenar por nome
        funcionarios.sort(Comparator.comparing(f -> f.nome));
        System.out.println("Funcionários ordenados:");
        funcionarios.forEach(f -> System.out.println(" - " + f.nome));
        
        // 3.11 - Total dos salários
        BigDecimal totalSalarios = funcionarios.stream()
            .map(f -> f.salario)
            .reduce(BigDecimal.ZERO, BigDecimal::add);
        System.out.println("Total dos salários: " + totalSalarios);
        
        // 3.12 - Quantos salários mínimos ganha cada funcionário
        BigDecimal salarioMinimo = new BigDecimal("1212.00");
        funcionarios.forEach(f -> {
            BigDecimal qtdSalariosMinimos = f.salario.divide(salarioMinimo, 2, BigDecimal.ROUND_HALF_UP);
            System.out.println(f.nome + " ganha " + qtdSalariosMinimos + " salários mínimos.");
        });
    }
}
